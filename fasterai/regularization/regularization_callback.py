# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/07_regularizer.ipynb (unless otherwise specified).

__all__ = ['label_func', 'path', 'files', 'dls', 'RegularizationCallback']

# Cell
from nbdev.showdoc import *

#export
from fastai.vision.all import *
from fastai.callback.all import *
from ..sparse.criteria import *

import torch
import torch.nn as nn
import torch.nn.functional as F

path = untar_data(URLs.PETS)
files = get_image_files(path/"images")

def label_func(f): return f[0].isupper()

dls = ImageDataLoaders.from_name_func(path, files, label_func, item_tfms=Resize(64))

# Cell
class RegularizationCallback(Callback):
    def __init__(self, granularity, wd=0.01):
        store_attr()

    def after_loss(self):
        reg = self.get_norm()
        self.learn.loss_grad += reg
        self.learn.loss = self.learn.loss_grad.clone()

    def get_norm(self):
        return self.wd*torch.stack([large_final(m, self.granularity).sum() for m in learn.modules() if isinstance(m, nn.Conv2d)]).sum()